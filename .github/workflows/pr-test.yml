# .github/workflows/pr-test.yml
name: PR Test Workflow

# Trigger this workflow when a pull request targets main or dev-abgabe
on:
  pull_request:
    branches: [main, dev-abgabe]

# Define shared directories for clarity and easy changes
env:
  BACKEND_DIR: conduit-backend
  FRONTEND_DIR: conduit-frontend

jobs:
  # Job 1: Run backend tests using Python 3.5 inside a Docker container
  backend-tests:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository including submodules (frontend and backend)
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Ensures submodules fetch correctly for all refs

      # Step 2: Show repo structure for quick debugging if paths are off
      - name: List repository structure
        run: |
          echo "Root:"
          ls -la
          echo "Backend dir:"
          ls -la "${{ env.BACKEND_DIR }}" || true
          echo "Frontend dir:"
          ls -la "${{ env.FRONTEND_DIR }}" || true

      # Step 3: Run backend tests inside a Python 3.5 Docker container
      - name: Run backend tests in Python 3.5 container
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/app" \
            -w "/app/${{ env.BACKEND_DIR }}" \
            python:3.5 \
            bash -c '
              set -e
              # Install dependencies (adjust filename here if you use a custom one like requirements-dev.txt)
              if [ -f requirements.txt ]; then
                pip install -r requirements.txt
              else
                echo "requirements.txt not found in $PWD" >&2
                exit 1
              fi
              # Run tests (adjust path or command if your test runner differs)
              gunicorn conduit.wsgi:application --check-config --log-level warning
            '

  # Job 2: Run frontend tests using Node.js 20
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository including submodules
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Step 2: Set up Node.js 20 for Angular frontend with npm cache
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/package-lock.json'

      # Step 3: Install frontend dependencies and run Angular tests in CI mode
      - name: Install frontend dependencies and run tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          # Prefer a dedicated CI test script if available, otherwise fall back
          if npm run -s | grep -q "^  test:ci$"; then
            npm run test:ci
          else
            # Karma/Angular typical CI flags; adjust if your project uses a different runner
            npm test -- --watch=false --no-progress
          fi
